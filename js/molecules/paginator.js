// Paginator - Basado en ILibTbPaginator interface
// Referencia: knowledge_base/tech_block_lib/molecules/paginator/

// Paginator completo (como el ejemplo de la documentaci√≥n)
export const paginatorCustom = {
    dataQaId: 'paginator-productos',
    totalRecords: 150, // Total de registros
    rows: 10, // Registros por p√°gina
    first: 0, // √çndice del primer registro (0-based)
    pageLinkSize: 5, // N√∫mero de enlaces de p√°gina a mostrar
    rowsPerPageOptions: [5, 10, 20, 50, { showAll: 'Todos' }], // Opciones de registros por p√°gina
    alwaysShow: true, // Mostrar siempre, incluso con una sola p√°gina
    showFirstLastIcon: true, // Mostrar botones primera/√∫ltima p√°gina
    showPageLinks: true, // Mostrar enlaces de p√°gina
    showJumpToPageDropdown: true, // Mostrar dropdown para saltar a p√°gina
    complementaryText: true, // Mostrar texto complementario
    
    // Configuraci√≥n de botones
    styleBtnPaginator: 'fill', // 'fill' | 'stroke' | 'text'
    typeBtnPaginator: 'primary', // 'primary' | 'secondary' | 'tertiary' | 'error'
    
    // Configuraci√≥n de dropdown
    dropdownIcon: 'fas fa-chevron-down',
    dropdownAppendTo: 'body',
    dropdownScrollHeight: '200px',
    
    // Templates de texto
    currentPageReportTemplate: 'P√°gina {currentPage} de {totalPages}',
    complementaryTextTemplate: 'Mostrando {first} a {last} de {totalRecords} productos',
    
    // Estilos
    style: {
        width: '100%',
        margin: '20px 0',
        padding: '15px',
        backgroundColor: '#f8f9fa',
        borderRadius: '8px',
        border: '1px solid #dee2e6'
    },
    class: 'paginator-custom',
    
    // Evento principal de cambio de p√°gina
    libTbOnPageChange: (e) => {
        console.log('Paginator - Cambio de p√°gina:', e);
        console.log(`üìÑ P√°gina: ${e.page + 1}`); // +1 porque e.page es 0-based
        console.log(`üìä Primer registro: ${e.first + 1}`); // +1 para mostrar 1-based
        console.log(`üìã Registros por p√°gina: ${e.rows}`);
        console.log(`üìö Total de p√°ginas: ${e.pageCount}`);
        
        // Actualizar el modelo
        paginatorCustom.first = e.first;
        paginatorCustom.rows = e.rows;
        
        // Calcular informaci√≥n adicional
        const currentPage = e.page + 1; // P√°gina actual (1-based)
        const totalPages = e.pageCount;
        const firstRecord = e.first + 1; // Primer registro de la p√°gina (1-based)
        const lastRecord = Math.min(e.first + e.rows, paginatorCustom.totalRecords); // √öltimo registro
        const totalRecords = paginatorCustom.totalRecords;
        
        console.log(`\nüìä Informaci√≥n de paginaci√≥n:`);
        console.log(`   P√°gina actual: ${currentPage} de ${totalPages}`);
        console.log(`   Registros: ${firstRecord} a ${lastRecord} de ${totalRecords}`);
        console.log(`   Registros por p√°gina: ${e.rows}`);
        
        // Simular carga de datos para la nueva p√°gina
        console.log(`\nüîÑ Simulando carga de datos para p√°gina ${currentPage}:`);
        simulateDataLoad(currentPage, e.rows, firstRecord, lastRecord);
        
        // L√≥gica adicional basada en la p√°gina
        if (currentPage === 1) {
            console.log('üè† Est√°s en la primera p√°gina');
        } else if (currentPage === totalPages) {
            console.log('üèÅ Est√°s en la √∫ltima p√°gina');
        } else {
            console.log(`üìñ Navegando por la p√°gina ${currentPage} de ${totalPages}`);
        }
        
        // Verificar si se cambi√≥ el n√∫mero de registros por p√°gina
        if (e.rows !== getDefaultRows()) {
            console.log(`üìè Cambio en registros por p√°gina: ${getDefaultRows()} ‚Üí ${e.rows}`);
            updateDefaultRows(e.rows);
        }
        
        // Informaci√≥n sobre navegaci√≥n
        const hasNext = currentPage < totalPages;
        const hasPrevious = currentPage > 1;
        
        console.log(`\nüß≠ Navegaci√≥n disponible:`);
        console.log(`   ‚Üê Anterior: ${hasPrevious ? 'Disponible' : 'No disponible'}`);
        console.log(`   ‚Üí Siguiente: ${hasNext ? 'Disponible' : 'No disponible'}`);
        
        // Mostrar rango de p√°ginas visibles en el paginador
        const pageLinkSize = paginatorCustom.pageLinkSize || 5;
        const startPage = Math.max(1, currentPage - Math.floor(pageLinkSize / 2));
        const endPage = Math.min(totalPages, startPage + pageLinkSize - 1);
        
        console.log(`\nüîó Enlaces de p√°gina visibles: ${startPage} a ${endPage}`);
        
        // Simular actualizaci√≥n de URL o estado de la aplicaci√≥n
        updateApplicationState(currentPage, e.rows, e.first);
    }
};

// Variable para rastrear los registros por p√°gina por defecto
let defaultRows = 10;

// Funci√≥n para obtener los registros por p√°gina por defecto
const getDefaultRows = () => defaultRows;

// Funci√≥n para actualizar los registros por p√°gina por defecto
const updateDefaultRows = (newRows) => {
    defaultRows = newRows;
    console.log(`üìè Registros por p√°gina actualizados a: ${newRows}`);
};

// Funci√≥n para simular carga de datos
const simulateDataLoad = (page, rows, firstRecord, lastRecord) => {
    console.log(`üì¶ Cargando datos para p√°gina ${page}:`);
    
    // Simular productos para la p√°gina actual
    const products = [];
    for (let i = firstRecord; i <= lastRecord; i++) {
        products.push({
            id: i,
            name: `Producto ${i}`,
            category: `Categor√≠a ${Math.ceil(i / 10)}`,
            price: (Math.random() * 1000 + 50).toFixed(2),
            stock: Math.floor(Math.random() * 100) + 1
        });
    }
    
    console.log(`   üìã Productos cargados:`, products.length);
    console.log(`   üè∑Ô∏è Rango: ${products[0]?.name} a ${products[products.length - 1]?.name}`);
    
    // Simular tiempo de carga
    setTimeout(() => {
        console.log(`   ‚úÖ Datos cargados exitosamente para p√°gina ${page}`);
    }, 100);
    
    return products;
};

// Funci√≥n para actualizar el estado de la aplicaci√≥n
const updateApplicationState = (currentPage, rows, first) => {
    console.log(`üîÑ Actualizando estado de la aplicaci√≥n:`);
    console.log(`   URL: /productos?page=${currentPage}&size=${rows}&offset=${first}`);
    console.log(`   Estado: { page: ${currentPage}, size: ${rows}, offset: ${first} }`);
    
    // Aqu√≠ se podr√≠a actualizar la URL del navegador
    // window.history.pushState({}, '', `/productos?page=${currentPage}&size=${rows}`);
    
    // Actualizar elemento en el DOM si es necesario
    const paginatorElement = document.getElementById('paginator-1');
    if (paginatorElement) {
        paginatorElement.custom = { ...paginatorCustom };
    }
};

// Funciones auxiliares para navegaci√≥n program√°tica
export const paginatorNavigationHelpers = {
    // Ir a la primera p√°gina
    goToFirstPage: () => {
        console.log('‚èÆÔ∏è Navegando a la primera p√°gina');
        paginatorCustom.first = 0;
        const pageChangeEvent = {
            page: 0,
            first: 0,
            rows: paginatorCustom.rows,
            pageCount: Math.ceil(paginatorCustom.totalRecords / paginatorCustom.rows)
        };
        paginatorCustom.libTbOnPageChange(pageChangeEvent);
    },
    
    // Ir a la √∫ltima p√°gina
    goToLastPage: () => {
        const totalPages = Math.ceil(paginatorCustom.totalRecords / paginatorCustom.rows);
        const lastPageFirst = (totalPages - 1) * paginatorCustom.rows;
        
        console.log('‚è≠Ô∏è Navegando a la √∫ltima p√°gina');
        paginatorCustom.first = lastPageFirst;
        
        const pageChangeEvent = {
            page: totalPages - 1,
            first: lastPageFirst,
            rows: paginatorCustom.rows,
            pageCount: totalPages
        };
        paginatorCustom.libTbOnPageChange(pageChangeEvent);
    },
    
    // Ir a una p√°gina espec√≠fica
    goToPage: (pageNumber) => {
        const totalPages = Math.ceil(paginatorCustom.totalRecords / paginatorCustom.rows);
        
        if (pageNumber < 1 || pageNumber > totalPages) {
            console.log(`‚ùå N√∫mero de p√°gina inv√°lido: ${pageNumber} (rango: 1-${totalPages})`);
            return;
        }
        
        const targetPage = pageNumber - 1; // Convertir a 0-based
        const targetFirst = targetPage * paginatorCustom.rows;
        
        console.log(`üéØ Navegando a la p√°gina ${pageNumber}`);
        paginatorCustom.first = targetFirst;
        
        const pageChangeEvent = {
            page: targetPage,
            first: targetFirst,
            rows: paginatorCustom.rows,
            pageCount: totalPages
        };
        paginatorCustom.libTbOnPageChange(pageChangeEvent);
    },
    
    // Cambiar registros por p√°gina
    changeRowsPerPage: (newRows) => {
        const validOptions = [5, 10, 20, 50];
        
        if (!validOptions.includes(newRows) && newRows !== paginatorCustom.totalRecords) {
            console.log(`‚ùå Opci√≥n inv√°lida: ${newRows}. Opciones v√°lidas:`, validOptions);
            return;
        }
        
        console.log(`üìè Cambiando registros por p√°gina a: ${newRows}`);
        
        // Recalcular la p√°gina actual para mantener el contexto
        const currentPage = Math.floor(paginatorCustom.first / paginatorCustom.rows);
        const newFirst = Math.min(currentPage * newRows, paginatorCustom.totalRecords - 1);
        const newPageCount = Math.ceil(paginatorCustom.totalRecords / newRows);
        const newCurrentPage = Math.floor(newFirst / newRows);
        
        paginatorCustom.rows = newRows;
        paginatorCustom.first = newFirst;
        
        const pageChangeEvent = {
            page: newCurrentPage,
            first: newFirst,
            rows: newRows,
            pageCount: newPageCount
        };
        paginatorCustom.libTbOnPageChange(pageChangeEvent);
    },
    
    // Obtener informaci√≥n actual del paginador
    getCurrentInfo: () => {
        const currentPage = Math.floor(paginatorCustom.first / paginatorCustom.rows) + 1;
        const totalPages = Math.ceil(paginatorCustom.totalRecords / paginatorCustom.rows);
        const firstRecord = paginatorCustom.first + 1;
        const lastRecord = Math.min(paginatorCustom.first + paginatorCustom.rows, paginatorCustom.totalRecords);
        
        const info = {
            currentPage,
            totalPages,
            firstRecord,
            lastRecord,
            totalRecords: paginatorCustom.totalRecords,
            rowsPerPage: paginatorCustom.rows
        };
        
        console.log('üìä Informaci√≥n actual del paginador:', info);
        return info;
    }
};
